Consumers in a consumer group share ownership of the partitions in the topics they subscribe to. When we add a new
consumer to the group, it starts consuming messages from partitions previously consumed by another consumer. The same
thing happens when a consumer shuts down or crashes; it leaves the group, and the partitions it used to consume will
be consumed by one of the remaining consumers. Reassignment of partitions to consumers also happen when the topics the
consumer group is consuming are modified (e.g., if an administrator adds new partitions).

Moving partition ownership from one consumer to another is called a rebalance. Rebalances are important because they
provide the consumer group with high availability and scalability (allowing us to easily and safely add and remove consumers),
but in the normal course of events they are fairly undesirable. During a rebalance, consumers can’t consume messages,
so a rebalance is basically a short window of unavailability of the entire consumer group. In addition, when partitions
are moved from one consumer to another, the consumer loses its current state; if it was caching any data, it will need
to refresh its caches—slowing down the application until the consumer sets up its state again.

The way consumers maintain membership in a consumer group and ownership of the partitions assigned to them is by
sending heartbeats to a Kafka broker designated as the group coordinator (this broker can be different for different
consumer groups). As long as the consumer is sending heartbeats at regular intervals, it is assumed to be alive, well,
and processing messages from its partitions. Heartbeats are sent when the consumer polls (i.e., retrieves records)
and when it commits records it has consumed.

If the consumer stops sending heartbeats for long enough, its session will time out and the group coordinator will
consider it dead and trigger a rebalance. If a consumer crashed and stopped processing messages, it will take the
group coordinator a few seconds without heartbeats to decide it is dead and trigger the rebalance. During those seconds,
no messages will be processed from the partitions owned by the dead consumer. When closing a consumer cleanly, the consumer
will notify the group coordinator that it is leaving, and the group coordinator will trigger a rebalance immediately,
reducing the gap in processing.

! If you are using a new version (0.10.1+) and need to handle records that take longer to process, you simply need to
tune max.poll.interval.ms so it will handle longer delays between polling for new records.