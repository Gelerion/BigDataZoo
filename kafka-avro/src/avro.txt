Apache Avro is a language-neutral data serialization format. The project was created by Doug Cutting to provide a way
to share data files with a large audience.

Avro data is described in a language-independent schema. The schema is usually described in JSON and the serialization
is usually to binary files, although serializing to JSON is also supported. Avro assumes that the schema is present when
reading and writing files, usually by embedding the schema in the files themselves.

One of the most interesting features of Avro, and what makes it a good fit for use in a messaging system like Kafka, is
that when the application that is writing messages switches to a new schema, the applications reading the data can
continue processing messages without requiring any change or update.

Suppose the original schema was:

{"namespace": "customerManagement.avro",
 "type": "record",
 "name": "Customer",
 "fields": [
     {"name": "id", "type": "int"},
     {"name": "name",  "type": "string""},
     {"name": "faxNumber", "type": ["null", "string"], "default": "null"} 1
 ]
}
id and name fields are mandatory, while fax number is optional and defaults to null.

We used this schema for a few months and generated a few terabytes of data in this format. Now suppose that we decide
that in the new version, we will upgrade to the twenty-first century and will no longer include a fax number field and
will instead use an email field.

The new schema would be:

{"namespace": "customerManagement.avro",
 "type": "record",
 "name": "Customer",
 "fields": [
     {"name": "id", "type": "int"},
     {"name": "name",  "type": "string"},
     {"name": "email", "type": ["null", "string"], "default": "null"}
 ]
}

Now, after upgrading to the new version, old records will contain “faxNumber” and new records will contain “email.”
In many organizations, upgrades are done slowly and over many months. So we need to consider how preupgrade applications
that still use the fax numbers and postupgrade applications that use email will be able to handle all the events in Kafka.

The reading application will contain calls to methods similar to getName(), getId(), and getFaxNumber. If it encounters
a message written with the new schema, getName() and getId() will continue working with no modification, but getFax Number()
will return null because the message will not contain a fax number.

Now suppose we upgrade our reading application and it no longer has the getFax Number() method but rather getEmail().
If it encounters a message written with the old schema, getEmail() will return null because the older messages
do not contain an email address.

However, there are two caveats to this scenario:
 * The schema used for writing the data and the schema expected by the reading application must be compatible.
   The Avro documentation includes compatibility rules.

 * The deserializer will need access to the schema that was used when writing the data, even when it is different than
   the schema expected by the application that accesses the data. In Avro files, the writing schema is included in the file itself